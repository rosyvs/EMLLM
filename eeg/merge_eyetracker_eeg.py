#%%
import mne
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import glob
import os
import meegkit
from mne.datasets import sample
from mne.stats.regression import linear_regression_raw
from scipy.interpolate import CubicSpline, interp1d
# % Load EEG and align it to eyetracker data
# %------------------------------------------

# % eyetracker timestamps are milliseconds measured from the time when the tracker software was started
# % eeg timestamps are sample number but the sampling rate is 1000Hz here so
# % no conversion necessary. **warning** IF reusing this script, you will need to be
# % cautious about wehther you are using time in sample or in milliseconds
# % and convert where appropriate.

# % Load preprocessed data from MNE-python
# % - this data has been cleaned using EEGanalysis/prepro.py:
# %   robust detrending, DSS_based line
# %   noise removal, and has events labelled from the trial log file.

#%% load eeg from fif
dir_raw = '/Volumes/Blue1TB/EyeMindLink/Data'
dir_fif = '/Volumes/Blue1TB/EEG_processed/preprocessed_fif/'
dir_events = os.path.expanduser('~/Emotive Computing Dropbox/Rosy Southwell/EyeMindLink/Processed/events/')
fn_base = '_p.fif'
GAZE_SRATE = 1000  # eyetracker sample rate
#%% load reparsed fixations df for all subjects
fix_df = pd.read_csv('../info/FixationReport+InboundSaccades.csv')  # this file is generated by gaze/wrangle_fix_sac_reports.py
fix_df['pID'] = fix_df['RECORDING_SESSION_LABEL'].str.split('-').str[0]
ia_df = pd.read_csv('../info/ia_label_mapping_opt_surprisal.csv')
beh_df = pd.read_csv('~/Emotive Computing Dropbox/Rosy Southwell/EyeMindLink/Processed/Behaviour/EML1_page_level.csv')
#%%
s = 150 # subj no to construct pID
pID = f'EML1_{s:03d}'
raw_file = os.path.join(dir_fif, f'{pID}_p.fif')
EEG = mne.io.read_raw_fif(raw_file, preload=True)


#%% Read info txt to determine whether EEG+triggers are from SD card (default) or streamed (backup)
info_file = os.path.join(dir_fif, f'{pID}-info.txt')
with open(info_file, 'r') as file:
    triginfo = file.read()

#%% Read events.csv for triggers and descriptions
events_file = os.path.join(dir_events, f'{pID}_events.csv')
logtrig = pd.read_csv(events_file).rename(columns={'EVENT': 'identifier'})
# Copy the correct EEG sample column for use depending on triginfo
if 'LA0' in triginfo:
    logtrig['eeg_use_sample'] = logtrig['eegSD_sample_est']
else:
    logtrig['eeg_use_sample'] = logtrig['eeg_sample_est']


#%% merge w behavioural data etc
thisbeh = beh_df[beh_df['ParticipantID']==pID]
thisbeh['TrialType'] = 'reading'
logtrig = logtrig.merge(thisbeh, on=['TrialType', 'Text', 'PageNum'], how='left')
logtrig['TrialType'] = 'other'
logtrig.loc[logtrig['VAL']==7, 'TrialType'] = 'reading'
logtrig.loc[logtrig['VAL']==20, 'TrialType'] = 'sham'
logtrig.loc[(logtrig['VAL']>=12) & (logtrig['VAL']<=15), 'TrialType'] = 'question'
logtrig.loc[(logtrig['VAL']>=2) & (logtrig['VAL']<=3), 'TrialType'] = 'recal'
logtrig.loc[logtrig['VAL']>20, 'TrialType'] = 'localizer'
logtrig.loc[logtrig['VAL']==25, 'TrialType'] = 'resting'

logtrig['description'] = 'TrialType:'  + logtrig['TrialType'] + '__identifier:' + logtrig['EVENT']
# convert to mne.Annotations
onsets = logtrig['eeg_use_sample'] / raw.info['sfreq'] # in seconds! 
durations = logtrig['duration_sec']
descriptions = logtrig['description']
annot_log = mne.Annotations(onset=onsets, duration=durations, description=descriptions)

#%% load orig eyetraker events from msg files
def read_eyetracker_events(event_type):
    files = glob.glob(os.path.join(dir_raw, pID, 'Unpacked', f'EML*{event_type}.csv'))
    events = pd.concat([pd.read_csv(file) for file in files], ignore_index=True)
    events['description'] = event_type + '_' + events['eye']
    events['latency'] = events['tStart'] / EEG.info['sfreq']  # convert to seconds
    events['duration'] = (events['tEnd'] - events['tStart']) / EEG.info['sfreq'] # convert to seconds
    return events

blinks = read_eyetracker_events('Blink')
saccades = read_eyetracker_events('Saccade')
fixations = read_eyetracker_events('Fixation')
eye_events = pd.concat([blinks, saccades, fixations], ignore_index=True)
eye_events = eye_events.dropna(subset=['latency']).sort_values('latency')

#%% interpolate all eye event timestamps to get closest eeg sample
# Select rows with non-NaN values for both eeg and eyetracker samples
ix = (~logtrig['eye_sample_est'].isna() & ~logtrig['eeg_use_sample'].isna() &
      (logtrig['eeg_use_sample'] < len(EEG)) &
      ~logtrig['identifier'].str.contains('Recal'))

F = CubicSpline(logtrig.loc[ix, 'eye_sample_est'], logtrig.loc[ix, 'eeg_use_sample'])

eye_events['eeg_tStart'] = np.round(F(eye_events['tStart'])).astype(int)

# Plot the interpolated fixation start times
plt.plot(eye_events['eeg_tStart'], eye_events['tStart'])
plt.xlabel('EEG Start Time')
plt.ylabel('Eye Tracker Start Time')
plt.title('Interpolated Fixation Start Times')
plt.show()

# conver eye events to mne.Annotations
eye_events['latency'] = eye_events['eeg_tStart'] / EEG.info['sfreq']
eye_events = eye_events[(eye_events['latency'] >= 0) & (eye_events['latency'] + eye_events['duration'] <= len(EEG)/EEG.info['sfreq'])]

annot_eye = mne.Annotations(onset=eye_events['latency'], duration=eye_events['duration'], description=eye_events['description'])


#%% add in new fixations (w IAs)
fix_new_i = fix_df[fix_df['pID']==pID].copy()
# merge with logtrig for trial info
fix_new_i = fix_new_i.merge(logtrig, how='left')
#  %% make events for reparsed fixations
fix_new_i['eeg_tStart'] = fix_new_i['CURRENT_FIX_START']/GAZE_SRATE*EEG.info['sfreq'] + fix_new_i['eeg_sample_est'] # add task start time in eeg samples to fixation samples since start of task
# WARNING thsi assumes eeg and eyetracker have same sample rate (TODO: u can update this to be more general)
fix_new_i['duration'] = fix_new_i['CURRENT_FIX_DURATION']/GAZE_SRATE # sec
fix_new_i['description'] = 'FixationReparsed_R' + '_PAGE_FIX_IX:' + fix_new_i['CURRENT_FIX_INDEX'].astype(str) + '_IA_ID:' + fix_new_i['CURRENT_FIX_INTEREST_AREA_ID'].astype(str)
fix_new_i['latency'] = fix_new_i['eeg_tStart'] / EEG.info['sfreq']
fix_new_i = fix_new_i[(fix_new_i['latency'] >= 0) & (fix_new_i['latency'] + fix_new_i['duration'] <= len(EEG)/EEG.info['sfreq'])]

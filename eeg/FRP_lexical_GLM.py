#%%
import mne
import re
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import glob
import os
import meegkit
from mne.datasets import sample
from mne.stats.regression import linear_regression_raw

#%% time-resolved regression to get regressors for lexical variables for (overlapping) fixation related potentials

#%% paths
dir_raw = '/Volumes/Blue1TB/EyeMindLink/Data'
dir_fif = '/Volumes/Blue1TB/EEG_processed/preprocessed_fif/'
event_fn_suffix = '_eyetracker_events.csv' # inside dir_fif, events containing fixations sacs and blinks as well as tasks, generated by merge_eyetracker_eeg.py
dir_out = '/Volumes/Blue1TB/EEG_processed/FRP_TRF_lexical/'
os.makedirs(dir_out, exist_ok=True)
dir_events = os.path.expanduser('~/Emotive Computing Dropbox/Rosy Southwell/EyeMindLink/Processed/events/') # task events
ia_df = pd.read_csv('../info/ia_label_mapping_opt_surprisal.csv')
beh_df = pd.read_csv('~/Emotive Computing Dropbox/Rosy Southwell/EyeMindLink/Processed/Behaviour/EML1_page_level.csv') # comp and MW scores
eeg_trigger_df = pd.read_csv('../info/EEGtriggerSources.csv')

# %% test subj
pID = 'EML1_028'
# %% load 
EEG = mne.io.read_raw_fif(os.path.join(dir_fif, f'{pID}_p.fif'), preload=True)
events = pd.read_csv(os.path.join(dir_fif, f'{pID}{event_fn_suffix}'))
beh_df_i = beh_df[beh_df['ParticipantID']==pID]
beh_df_i['identifier'] = beh_df_i['Text'].astype(str) + (beh_df_i['PageNum']-1).astype(str)
# make annotations from events
onsets = events['latency_sec'] # in seconds! 
durations = events['duration_sec']
descriptions = events['description']
annot = mne.Annotations(onset=onsets, duration=durations, description=descriptions)
EEG.set_annotations(annot)


# select only reading events
events_reading = events[events['task']=='reading']
EEG.crop(tmin=events_reading['latency_sec'].min()-60, tmax=events_reading['latency_sec'].max()+60)
events=events[events['latency_sec']>=EEG.times[0] & events['latency_sec']<=EEG.times[-1]]
# %% apply preprocessing to EEG
# reref to average
EEG.set_eeg_reference('average', projection=False)
# filter
EEG.filter(0.1, 40)
# resample to 100 Hz
EEG.resample(100)

#%% sanity check: basic rERP for FRP vs epoch
event_id = 'Fixation_R'
sel = events[events['event_type'].str.contains(event_id)][['event_type','task','description','latency_sec','duration_sec']]
# convert to ANnotation
sel_annot = mne.Annotations(onset=sel['latency_sec'], duration=sel['duration_sec'], description=sel['description'])

# convert to mne events (numpy array)
trl, trldict = mne.events_from_annotations(EEG, regexp=event_id)
tmin, tmax = -0.3, 0.8
epochs = mne.Epochs(EEG, trl, event_id=event_id, tmin=tmin, tmax=tmax, baseline=None, preload=True)

# plot ERP
fig, ax = plt.subplots()
epochs.average().plot(axes=ax)
ax.set(title=f'{event_id} ERP')
plt.show()

# %% rERP
rERP = linear_regression_raw(EEG, events, event_id=event_id, tmin=tmin, tmax=tmax, return_design=True)

# plot both results, and their difference

# %% make GLM design matrix
# fixation onsets, surprisal, frequency, MW label
# merge lexical properties to events by IA_ID
events['IA_ID'] = events['IA_ID'].astype(str)
ia_df['IA_ID'] = ia_df['IA_ID'].astype(str)
events = events.merge(ia_df, on=['identifier','IA_ID'], how='left')

# merge MW scores to events by identifier
events = events.merge(beh_df_i, on='identifier', how='left')

X = events[['event_type','identifier','task','latency_sec','surprisal','frequency','MW_label']]

X = X.sort_values(by='latency_sec')
X_timeExpanded = pd.DataFrame()
# event of interest is Fixation_R
# in time range of -300 +800 ms
# for each fixation event, for each timepont in range -300 +800 ms, add a colunm to the design matrix


# %% 
